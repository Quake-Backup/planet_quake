#pragma once


static const u8 FirstTable[385] =
{
	0, 240, 134, 3, 0, 1, 61, 4, 2, 3, 0, 3,
	237, 215, 196, 3, 208, 11, 239, 6, 4, 3, 240, 132,
	109, 240, 5, 3, 208, 12, 80, 144, 8, 3, 240, 118,
	223, 254, 119, 3, 144, 1, 139, 6, 6, 3, 176, 128,
	59, 252, 68, 3, 0, 7, 251, 223, 16, 3, 208, 48,
	159, 214, 129, 3, 0, 8, 144, 176, 13, 3, 208, 254,
	93, 6, 10, 3, 0, 11, 157, 144, 8, 3, 176, 32,
	192, 240, 14, 3, 144, 1, 31, 6, 13, 3, 176, 7,
	93, 247, 102, 3, 240, 29, 224, 0, 15, 3, 240, 114,
	45, 208, 232, 3, 240, 120, 45, 8, 16, 3, 0, 17,
	29, 244, 69, 3, 240, 52, 15, 156, 8, 3, 240, 138,
	32, 209, 116, 3, 144, 1, 139, 246, 194, 3, 176, 128,
	59, 12, 19, 3, 0, 20, 251, 223, 127, 3, 240, 136,
	221, 215, 10, 3, 0, 21, 61, 176, 13, 3, 240, 124,
	96, 1, 23, 3, 240, 123, 191, 152, 8, 3, 176, 32,
	255, 242, 115, 3, 144, 1, 45, 212, 131, 3, 176, 7,
	128, 1, 25, 3, 240, 133, 61, 244, 112, 3, 240, 135,
	237, 215, 196, 3, 208, 11, 31, 7, 26, 3, 0, 27,
	109, 0, 28, 3, 208, 12, 208, 145, 8, 3, 0, 30,
	207, 6, 31, 3, 144, 1, 139, 6, 32, 3, 176, 128,
	59, 252, 4, 3, 240, 122, 251, 223, 16, 3, 208, 48,
	16, 210, 129, 3, 0, 34, 48, 178, 13, 3, 208, 254,
	93, 246, 53, 3, 240, 111, 157, 144, 8, 3, 176, 32,
	127, 12, 36, 3, 144, 1, 80, 2, 38, 3, 176, 7,
	93, 7, 39, 3, 240, 49, 128, 2, 41, 3, 0, 42,
	45, 208, 232, 3, 0, 43, 45, 8, 44, 3, 240, 64,
	29, 4, 45, 3, 0, 46, 255, 145, 8, 3, 0, 47,
	255, 213, 116, 3, 144, 1, 139, 6, 48, 3, 176, 128,
	59, 252, 121, 3, 0, 49, 251, 223, 127, 3, 240, 137,
	221, 215, 10, 3, 0, 50, 61, 176, 13, 3, 240, 50,
	48, 3, 52, 3, 0, 53, 96, 147, 8, 3, 176, 32,
	112, 3, 56, 3, 144, 1, 45, 212, 131, 3, 176, 7,
	0
};

static const u8 SecondTable[685] =
{
	9, 13, 0, 9, 173, 243, 9, 189, 247, 9, 173, 243,
	186, 156, 193, 170, 155, 193, 186, 156, 193, 170, 155, 193,
	138, 159, 93, 234, 158, 93, 138, 159, 93, 234, 158, 93,
	137, 163, 234, 137, 163, 198, 137, 163, 234, 137, 163, 198,
	105, 163, 212, 105, 163, 38, 105, 163, 212, 105, 163, 38,
	186, 146, 160, 154, 155, 160, 186, 146, 160, 154, 155, 160,
	250, 172, 204, 106, 175, 166, 250, 172, 204, 106, 175, 166,
	74, 174, 60, 202, 174, 23, 74, 174, 60, 202, 174, 23,
	74, 169, 156, 106, 161, 152, 74, 169, 156, 106, 161, 152,
	58, 154, 80, 154, 156, 80, 58, 154, 80, 154, 156, 80,
	218, 153, 144, 154, 158, 144, 218, 153, 144, 154, 158, 144,
	170, 162, 162, 122, 165, 79, 170, 162, 162, 122, 165, 79,
	9, 155, 168, 9, 155, 168, 9, 155, 168, 9, 155, 168,
	122, 153, 72, 42, 155, 72, 122, 153, 72, 42, 155, 72,
	41, 146, 62, 41, 146, 62, 41, 146, 62, 41, 146, 62,
	170, 172, 149, 186, 169, 171, 170, 172, 149, 186, 169, 171,
	249, 168, 175, 249, 168, 206, 249, 168, 175, 249, 168, 206,
	233, 145, 103, 233, 145, 103, 233, 145, 103, 233, 145, 103,
	25, 161, 219, 25, 161, 249, 25, 161, 219, 25, 161, 249,
	154, 154, 55, 186, 158, 55, 154, 154, 55, 186, 158, 55,
	154, 164, 145, 234, 171, 27, 154, 164, 145, 234, 171, 27,
	106, 169, 82, 202, 170, 83, 106, 169, 82, 202, 170, 83,
	121, 148, 90, 121, 148, 90, 121, 148, 90, 121, 148, 90,
	90, 174, 85, 202, 162, 75, 90, 174, 85, 202, 162, 75,
	105, 148, 146, 105, 148, 146, 105, 148, 146, 105, 148, 146,
	233, 168, 211, 233, 168, 189, 233, 168, 211, 233, 168, 189,
	250, 171, 25, 218, 175, 218, 250, 171, 25, 218, 175, 218,
	217, 150, 99, 217, 150, 99, 217, 150, 99, 217, 150, 99,
	25, 174, 59, 25, 174, 231, 25, 174, 59, 25, 174, 231,
	137, 162, 217, 137, 162, 215, 137, 162, 217, 137, 162, 215,
	73, 150, 51, 73, 150, 51, 73, 150, 51, 73, 150, 51,
	42, 158, 58, 122, 155, 58, 42, 158, 58, 122, 155, 58,
	26, 149, 76, 202, 155, 76, 26, 149, 76, 202, 155, 76,
	185, 165, 251, 185, 165, 245, 185, 165, 251, 185, 165, 245,
	170, 145, 98, 218, 148, 98, 170, 145, 98, 218, 148, 98,
	249, 160, 41, 249, 160, 181, 249, 160, 41, 249, 160, 181,
	90, 173, 159, 202, 175, 209, 90, 173, 159, 202, 175, 209,
	217, 163, 187, 217, 163, 179, 217, 163, 187, 217, 163, 179,
	169, 166, 216, 169, 166, 220, 169, 166, 216, 169, 166, 220,
	218, 173, 165, 250, 174, 177, 218, 173, 165, 250, 174, 177,
	185, 150, 141, 185, 150, 141, 185, 150, 141, 185, 150, 141,
	74, 171, 205, 42, 175, 36, 74, 171, 205, 42, 175, 36,
	201, 165, 78, 201, 165, 197, 201, 165, 78, 201, 165, 197,
	234, 154, 140, 154, 149, 140, 234, 154, 140, 154, 149, 140,
	218, 170, 214, 58, 162, 39, 218, 170, 214, 58, 162, 39,
	9, 174, 167, 9, 174, 244, 9, 174, 167, 9, 174, 244,
	26, 162, 84, 106, 174, 184, 26, 162, 84, 106, 174, 184,
	138, 165, 240, 170, 164, 147, 138, 165, 240, 170, 164, 147,
	42, 173, 20, 74, 170, 222, 42, 173, 20, 74, 170, 222,
	170, 169, 86, 170, 170, 182, 170, 169, 86, 170, 170, 182,
	233, 165, 28, 233, 165, 158, 233, 165, 28, 233, 165, 158,
	26, 159, 18, 218, 146, 18, 26, 159, 18, 218, 146, 18,
	153, 147, 200, 153, 147, 200, 153, 147, 200, 153, 147, 200,
	9, 166, 63, 9, 166, 21, 9, 166, 63, 9, 166, 21,
	137, 145, 46, 137, 145, 46, 137, 145, 46, 137, 145, 46,
	250, 157, 19, 58, 158, 19, 250, 157, 19, 58, 158, 19,
	154, 169, 161, 170, 175, 37, 154, 169, 161, 170, 175, 37,
	0
};


UDT_FORCE_INLINE u16 myT_Read12Bits(const u8* firstElement, u32 elementIndex)
{
	const u32 byteIndex = elementIndex + (elementIndex >> 1);
	const u32 bitsToShift = (elementIndex & 1) << 2;
	const u16 shortValue = *(u16*)(firstElement + byteIndex);
	return (shortValue >> bitsToShift) & 0xFFF;
}

UDT_FORCE_INLINE void myT_ReadSymbol(u32& symbol, u32& bitsRead, u32 look)
{	
	if((look & 0x7FF) == 256)
	{
		bitsRead = 11;
		symbol = 0;
		return;
	}
	
	const u32 lookFirstByte = look & 0xFF;
	const u16 firstResult = myT_Read12Bits(FirstTable, lookFirstByte);
	if((firstResult & 1) == 0)
	{
		const u32 secondTableBase = (firstResult >> 1) & 0x1FF;
		const u32 secondTableOffset = (look >> 8) & 7;
		const u32 secondTableIndex = secondTableBase + secondTableOffset;
		const u16 secondResult = myT_Read12Bits(SecondTable, secondTableIndex);
		bitsRead = secondResult & 15;
		symbol = (secondResult >> 4) & 0xFF;
		return;
	}

	bitsRead = 1 + ((firstResult >> 1) & 7);
	symbol = (firstResult >> 4) & 0xFF;
}

// Get the right-aligned bits starting at bitIndex.
// We only really need the first 11 and don't care what comes after that.
UDT_FORCE_INLINE u32 myT_GetBits(u32 bitIndex, const u8* fin)
{
	return *(u32*)(fin + (bitIndex >> 3)) >> (bitIndex & 7);
}

// Get the bit at bitIndex in the LSB of the result and have all other bits be 0.
UDT_FORCE_INLINE s32 myT_GetBit(s32 bitIndex, const u8* fin)
{
	return (fin[(bitIndex >> 3)] >> (bitIndex & 7)) & 1;
}

UDT_FORCE_INLINE void myT_OffsetReceive(s32* ch, const u8* fin, s32* offset)
{
	const u32 input = myT_GetBits(*(u32*)offset, fin);

	u32 bitsRead = 0;
	myT_ReadSymbol(*(u32*)ch, bitsRead, input);

	*offset += (s32)bitsRead;
}


static const u16 EncoderTable[256] =
{
	34, 437, 1159, 1735, 2584, 280, 263, 1014,
	341, 839, 1687, 183, 311, 726, 920, 2761,
	599, 1417, 7945, 8073, 7642, 16186, 8890, 12858,
	3913, 6362, 2746, 13882, 7866, 1080, 1273, 3400,
	886, 3386, 1097, 11482, 15450, 16282, 12506, 15578,
	2377, 6858, 826, 330, 10010, 12042, 8009, 1928,
	631, 3128, 3832, 6521, 1336, 2840, 217, 5657,
	121, 3865, 6553, 6426, 4666, 3017, 5193, 7994,
	3320, 1287, 1991, 71, 536, 1304, 2057, 1801,
	5081, 1594, 11642, 14106, 6617, 10938, 7290, 13114,
	4809, 2522, 5818, 14010, 7482, 5914, 7738, 9018,
	3450, 11450, 5897, 2697, 3193, 4185, 3769, 3464,
	3897, 968, 6841, 6393, 2425, 775, 1048, 5369,
	454, 648, 3033, 3145, 2440, 2297, 200, 2872,
	2136, 2248, 1144, 1944, 1431, 1031, 376, 408,
	1208, 3608, 2616, 1848, 1784, 1671, 135, 1623,
	502, 663, 1223, 2007, 248, 2104, 24, 2168,
	1656, 3704, 1400, 1864, 7353, 7241, 2073, 1241,
	4889, 5690, 6153, 15738, 698, 5210, 1722, 986,
	12986, 3994, 3642, 9306, 4794, 794, 16058, 7066,
	4425, 8090, 4922, 714, 11738, 7194, 12762, 7450,
	5001, 1562, 11834, 13402, 9914, 3290, 3258, 5338,
	905, 15386, 9178, 15306, 3162, 15050, 15930, 10650,
	15674, 8522, 8250, 7114, 10714, 14362, 9786, 2266,
	1352, 4153, 1496, 518, 151, 15482, 12410, 2952,
	7961, 8906, 1114, 58, 4570, 7258, 13530, 474,
	9, 15258, 3546, 6170, 4314, 2970, 7386, 14666,
	7130, 6474, 14554, 5514, 15322, 3098, 15834, 3978,
	3353, 2329, 2458, 12170, 570, 1818, 11578, 14618,
	1175, 8986, 4218, 9754, 8762, 392, 8282, 11290,
	7546, 3850, 11354, 12298, 15642, 14986, 8666, 20491,
	90, 13706, 12186, 6794, 11162, 10458, 759, 582
};


UDT_FORCE_INLINE void myT_PutBit(u8* fout, s32 bitIndex, s32 bit)
{
	if((bitIndex & 7) == 0)
	{
		fout[(bitIndex >> 3)] = 0;
	}

	fout[(bitIndex >> 3)] |= bit << (bitIndex & 7);
}

UDT_FORCE_INLINE void myT_PutBits(u8* fout, u32 bitIndex, u32 bits, u32 bitCount)
{
	for(u32 i = 0; i < bitCount; ++i)
	{
		myT_PutBit(fout, bitIndex + i, (s32)(bits & 1));
		bits >>= 1;
	}
}

UDT_FORCE_INLINE void myT_OffsetTransmit(u8 *fout, s32 *offset, s32 ch)
{
	const u16 result = EncoderTable[ch];
	const u16 bitCount = result & 15;
	const u16 code = (result >> 4) & 0x7FF;

	myT_PutBits(fout, *(u32*)offset, code, bitCount);

	*offset += (s32)bitCount;
}
