void (vector ang) makevectors;
void (entity e, vector o) setorigin;
void (entity e, string m) setmodel;
void (entity e, vector min, vector max) setsize;
string (string format) strftime;
float () random;
void (entity e, float chan, string samp,
		float vol, float atten) xsound;
vector (vector v) normalize;
void (string e) error;
void (string e) objerror;
float (vector v) vlen;
float (vector v) vectoyaw;
entity () spawn;
void (entity e) remove;
void (vector v1, vector v2, float nomonsters,
		entity forent) traceline;
entity () checkclient;
string (string s) precache_sound;
string (string s) precache_model;
void (entity client, string s) self_stuffcmd;
entity (vector org, float rad) findradius;
void (entity client, string s) xself_sprint;
string (float f) ftos;
string (vector v) vtos;
void () coredump;
void () traceon;
void () traceoff;
void (entity e) eprint;
float (float yaw, float dist) walkmove;
float () droptofloor;
void (float style, string value) lightstyle;
float (float v) rint;
float (float v) floor;
float (float v) ceil;
float (entity e) checkbottom;
float (vector v) pointcontents;
float (float f) fabs;
vector (entity e, float speed) aim;
float (string s) cvar;
void (string s) localcmd;
entity (entity e) nextent;
void (vector o, vector d, float color,
		float count) particle;
void () ChangeYaw;
vector (vector v) vectoangles;
void (float to, float f) WriteByte;
void (float to, float f) WriteChar;
void (float to, float f) WriteShort;
void (float to, float f) WriteLong;
void (float to, float f) WriteCoord;
void (float to, float f) WriteAngle;
void (float to, string s) WriteString;
void (float to, entity s) WriteEntity;
float (float f) sin;
float (float f) cos;
float (float f) sqrt;
void (float step) movetogoal;
void (entity e) makestatic;
void (string s) xchangelevel;
void (vector pos, string samp, float vol,
		float atten) ambientsound;
void (entity e) setspawnparms;
float (string m) user_allowed_map;
void (float i) hex16;
void (float i) hex32;
float (float a, float b) AddInt;
float (float a, float b) SubInt;
float (float a) NegInt;
void (float f) fnstring;
void (string dst, string src) strcpy;
void () InternalInit;
void (float h) GetHunkName;
float (float h) PrintHunk;
void () SearchHunk;
void () SearchHunkThink;
void () InitSearchHunk;
entity (entity e) qs_address_e;
entity () qs_address;
string (entity e) net_address_e;
string () net_address;
float (string s) strlen_qc;
float (string s) strlen;
float (float bytes) allocate_hunk;
string (float bytes) allocate_string_size;
string (string s) allocate_string;
string (string s1, string s2) strcat;
string (string expr, float offset, float length) substr;
string (string expr, float offset, float length, string replace) substr_replace;
string (string s, float max) flen;
float (string ch) hex_ctof;
string (float n) atoc;
float (string s) stof;
entity (float type, float offset) Get_Hunk;
entity (float type, float offset) Read_Hunk_Entity;
vector (float type, float offset) Read_Hunk_Vector;
float (float type, float offset) Read_Hunk_Float;
string (entity hunk) Read_Hunk_String_e;
string (float type, float offset) Read_Hunk_String;
string (entity hunk, float bytes) Read_Hunk_String_Max_e;
string (float type, float offset, float bytes) Read_Hunk_String_Max;
string (entity hunk, float bytes) Read_Hunk_String_Exact_e;
string (float type, float offset, float bytes) Read_Hunk_String_Exact;
void (float type, float offset, entity e) Write_Hunk_Entity;
void (float type, float offset, vector v) Write_Hunk_Vector;
void (float type, float offset, float f) Write_Hunk_Float;
void (entity hunk, string s) Write_Hunk_String_e;
void (float type, float offset, string s) Write_Hunk_String;
void (float type, float offset, string data, float bytes) Write_Hunk_String_Max;
void (entity hunk, string data, float bytes) Write_Hunk_String_Exact_E;
void (entity hunk, string data, float bytes) Write_Hunk_String_Exact_e;
void (float type, float offset, string data, float bytes) Write_Hunk_String_Exact;
float () server_time;
void () update_server_time;
string (float n) parse_time;
string () PQ_Version;
void () Log_Client_Disconnect;
void () Client_Disconnect_Log;
float (float ip) ban_check;
void () ban_list;
vector (string ip) ip_to_vec;
void (float ip) ban_remove;
void (float ip) ban_add;
float (float ip) mute_check;
void () mute_list;
void (float ip) mute_remove;
void (float ip) mute_add;
float (string last_level) track_level_duplicate;
void (string last_level) track_last_level;
void () hunk_storage_init;
void () Test_Button;
void () SUB_Null;
void () SUB_Remove;
void () SetMovedir;
void () InitTrigger;
void (entity ent, vector tdest, float tspeed, void () func) SUB_CalcMoveEnt;
void (vector tdest, float tspeed, void () func) SUB_CalcMove;
void () SUB_CalcMoveDone;
void (entity ent, vector destangle, float tspeed, void () func) SUB_CalcAngleMoveEnt;
void (vector destangle, float tspeed, void () func) SUB_CalcAngleMove;
void () SUB_CalcAngleMoveDone;
void () DelayThink;
void () SUB_UseTargets;
void (float normal) SUB_AttackFinished;
void (void () thinkst) SUB_CheckRefire;
float () CheckAttack;
void () ai_face;
void (float d) ai_charge;
void () ai_charge_side;
void () ai_melee;
void () ai_melee_side;
float () SoldierCheckAttack;
float () ShamCheckAttack;
float () OgreCheckAttack;
float (float v) anglemod;
void () movetarget_f;
void () path_corner;
void () t_movetarget;
float (entity targ) range;
float (entity targ) visible;
float (entity targ) infront;
void () HuntTarget;
void () SightSound;
void () FoundTarget;
float () FindTarget;
void (float dist) ai_forward;
void (float dist) ai_back;
void (float dist) ai_pain;
void (float dist) ai_painforward;
void (float dist) ai_walk;
void () ai_stand;
void () ai_turn;
void (vector dest3) ChooseTurn;
float () FacingIdeal;
float () CheckAnyAttack;
void () ai_run_melee;
void () ai_run_missile;
void () ai_run_slide;
float (entity e) ai_valid_enemy;
void (float dist) ai_run;
float (entity targ, entity inflictor) CanDamage;
void (entity targ, entity attacker, string dtype) Killed;
float (entity targ, entity inflictor, entity attacker, float damage, string dtype) T_Damage;
void (float attn, entity inflictor, entity attacker, float damage, entity ignore, string dtype) T_RadiusDamage;
void () SUB_regen;
void () noclass;
void (entity e, float chan, string samp, float vol, float atten) item_sound;
void (entity e, string s) precache_noise_e;
void (string s) precache_noise;
void () blink_item;
void () maybe_disable_item;
void () PlaceItem;
void () StartItem;
float (entity e, float heal_amount, float ignore) T_Heal;
void (string it_model, string it_noise) health_set;
void () item_health;
void (entity e) maybe_respawn_mega;
void () health_touch;
void () armor_touch;
void () armor_cycle;
void (float it_skin) armor_set;
void () item_armor1;
void () item_armor2;
void () item_armorInv;
void () drop_armor;
void () bound_other_ammo;
void () weapon_touch;
void () weapon_up;
void (string it_model, float it_weapon, string it_netname) weapon_set;
void () weapon_supershotgun;
void () weapon_nailgun;
void () weapon_supernailgun;
void () weapon_grenadelauncher;
void () weapon_rocketlauncher;
void () weapon_lightning;
void () ammo_touch;
void (string it_model, float it_aflag, float it_weapon, string it_netname) ammo_set;
void () item_shells;
void () item_spikes;
void () item_rockets;
void () item_cells;
void () item_weapon;
void () key_touch;
void () key_sound;
void (string it_model, string it_netname, float it_key) key_set;
void () item_key1;
void () item_key2;
void () sigil_touch;
void (string it_model) sigil_set;
void () item_sigil;
void () powerup_denied;
void () powerup_touch;
void (string it_model, string it_noise, string it_netname, float it_powerup) powerup_set;
void () item_artifact_invulnerability;
void () item_artifact_envirosuit;
void () item_artifact_invisibility;
void () item_artifact_super_damage;
void () BackpackTouch;
void () DropBackpack;
void (string type, float finish_time) drop_powerup;
void () drop_powerup_touch;
void () item_arena_rune;
float () crandom;
void () W_FireAxe;
vector () wall_velocity;
void (vector org, vector vel) SpawnMeatSpray;
void (vector org, vector vel, float damage) SpawnBlood;
void (float damage) spawn_touchblood;
void () ClearMultiDamage;
void () ApplyMultiDamage;
void (entity hit, float damage, string dtype) AddMultiDamage;
void () Multi_Finish;
void (float damage, vector dir, string dtype) TraceAttack;
void (float shotcount, vector dir, vector spread, string dtype) FireBullets;
void () W_FireShotgun;
void () MagicShotgun_Think;
void () W_MagicShotgun;
void () W_FireSuperShotgun;
void () s_explode1;
void () s_explode2;
void () s_explode3;
void () s_explode4;
void () s_explode5;
void () s_explode6;
void () BecomeExplosion;
void () RocketDamageExplosion;
void () reflect_projectile;
void () T_MissileTouch;
void (string class) W_FireRocket;
void (entity from, float damage, string dtype) LightningHit;
void (vector p1, vector p2, entity from, float damage, string dtype) LightningDamage;
void () W_FireLightning;
void (entity targ) GrenadeExplode_targ;
void () GrenadeExplode;
void () GrenadeTouch;
void (string class) W_FireGrenade;
void (vector org, vector dir) launch_spike;
void () W_FireSuperSpikes;
void (float ox) W_FireSpikes;
void () spike_touch;
void () superspike_touch;
void (float reset) W_SetCurrentAmmo;
float () W_BestWeapon;
float () W_CheckNoAmmo;
void () W_Attack;
void () ImpulseCommands;
void () W_WeaponFrame;
void () SuperDamageSound;
void () precaches;
void () main;
void () worldspawn;
void () StartFrame;
void () InitBodyQue;
void (entity ent) CopyToBodyQue;
void () info_intermission;
void () SetChangeParms;
void () SetNewParms;
void () SetParms;
void () SetPracticeParms;
void () SetArenaParms;
void () SetMidairParms;
void () DecodeLevelParms;
entity () FindIntermission;
void () GotoNextMap;
void () IntermissionThink;
void (entity e) move_to_intermission;
void (float who) proto_intermission;
void () execute_changelevel;
void () changelevel_touch;
void () trigger_changelevel;
void () respawn;
void () ClientKill;
entity () SelectSpawnPoint;
void () PutClientInServer;
void () info_player_start;
void () info_player_start2;
void () testplayerstart;
void () info_player_deathmatch;
void () info_player_coop;
void () NextLevel;
void () CheckRules;
void () PlayerDeathThink;
void () PlayerJump;
void () WaterMove;
void () CheckWaterJump;
float (entity e) client_ping;
void () client_ping_times;
void () PlayerPreThink;
void () CheckPowerups;
void () PlayerPostThink;
void () client_ip;
void () ClientConnect;
void () ClientDisconnect;
void (entity targ, entity attacker, string dt) ClientObituary;
void () player_stand;
void () player_run;
void () player_shot1;
void () player_shot2;
void () player_shot3;
void () player_shot4;
void () player_shot5;
void () player_shot6;
void () player_axe1;
void () player_axe2;
void () player_axe3;
void () player_axe4;
void () player_axeb1;
void () player_axeb2;
void () player_axeb3;
void () player_axeb4;
void () player_axec1;
void () player_axec2;
void () player_axec3;
void () player_axec4;
void () player_axed1;
void () player_axed2;
void () player_axed3;
void () player_axed4;
float (float max_duration) player_stop_attack;
void () player_nail1;
void () player_nail2;
void () player_ssshot1;
void () player_ssshot2;
void () player_light1;
void () player_light2;
void () player_rocket1;
void () player_rocket2;
void () player_rocket3;
void () player_rocket4;
void () player_rocket5;
void () player_rocket6;
void () PainSound;
void () player_pain1;
void () player_pain2;
void () player_pain3;
void () player_pain4;
void () player_pain5;
void () player_pain6;
void () player_axpain1;
void () player_axpain2;
void () player_axpain3;
void () player_axpain4;
void () player_axpain5;
void () player_axpain6;
void () player_pain;
void () DeathBubblesSpawn;
void (float num_bubbles) DeathBubbles;
void () DeathSound;
void () PlayerDead;
vector (float dm) VelocityForDamage;
void (string gibname, float dm) ThrowGib;
void (string gibname, float dm) ThrowHead;
void () GibPlayer;
void () PlayerDie;
void () set_suicide_frame;
void () player_diea1;
void () player_diea2;
void () player_diea3;
void () player_diea4;
void () player_diea5;
void () player_diea6;
void () player_diea7;
void () player_diea8;
void () player_diea9;
void () player_diea10;
void () player_diea11;
void () player_dieb1;
void () player_dieb2;
void () player_dieb3;
void () player_dieb4;
void () player_dieb5;
void () player_dieb6;
void () player_dieb7;
void () player_dieb8;
void () player_dieb9;
void () player_diec1;
void () player_diec2;
void () player_diec3;
void () player_diec4;
void () player_diec5;
void () player_diec6;
void () player_diec7;
void () player_diec8;
void () player_diec9;
void () player_diec10;
void () player_diec11;
void () player_diec12;
void () player_diec13;
void () player_diec14;
void () player_diec15;
void () player_died1;
void () player_died2;
void () player_died3;
void () player_died4;
void () player_died5;
void () player_died6;
void () player_died7;
void () player_died8;
void () player_died9;
void () player_diee1;
void () player_diee2;
void () player_diee3;
void () player_diee4;
void () player_diee5;
void () player_diee6;
void () player_diee7;
void () player_diee8;
void () player_diee9;
void () player_die_ax1;
void () player_die_ax2;
void () player_die_ax3;
void () player_die_ax4;
void () player_die_ax5;
void () player_die_ax6;
void () player_die_ax7;
void () player_die_ax8;
void () player_die_ax9;
void () Haste_Sound;
void () Rune_Enviro;
void () Enviro_Jump;
void () Regen_Activate;
void () Rune_Regen;
void (float riders, entity of_e) Rune_Fly_sprint;
void () Rune_Fly_Activate;
void () Rune_Fly;
void () GFire_Touch;
void () GFire_Spawn;
void () Rune_Firewalk;
void () recall_point_erase;
void (float riders, entity of_e) Rune_Recall_sprint;
void () Rune_Recall;
void () Rune_Zap;
void () Zap_Think;
void (float is_new) Zap_Spawn;
void () Rune_Cloak;
void () Bomb_Think;
void () Rune_Bomb;
void () Bomb_Arm;
void () Bomb_Spawn;
void () DSpot_Blow;
void () DSpot_Touch;
void () DSpot_Think;
void () DSpot_Arm;
void (float riders, entity of_e) Rune_DSpots_sprint;
void () Rune_DSpots;
void () Holo_Think;
void (float riders, entity of_e) Rune_Holo_sprint;
void () Rune_Holo;
void () Orb_WanderThink;
void () Orb_Think;
void () Orb_Spawn;
float (string c) is_blinkable_class;
void (float reblink) Rune_Blink;
void () maybe_reblink;
float () maybe_remove_hat;
void () Hat_Think;
void (entity e, string tmodel, vector offs, vector ang, float type) Hat_Spawn;
void () Rune_Camo;
void () Rune_Jump;
void () Rune_Ammo;
void (float incl_rocket) Rune_Ammo_1;
void () Vamp_Think;
void () Vamp_Spawn;
void (entity vamp, entity victim, float damage) Vamp_Heal;
void (entity vamp) Vamp_Resurrect;
float () takedamage_hack;
void () Shield_On;
void () Rune_Shield;
void () Strength_Sound;
void () Radio_Think;
void (float riders, entity of_e) Rune_Radio_sprint;
void () Rune_Radio;
void () Rune_Switch;
void () Freeze_Think;
void (entity wanted) Unfreeze;
void () Freeze_Frozen;
void () Freeze_Touch;
void () Freeze_Arm;
void (float riders, entity of_e) Rune_Freeze_sprint;
void () Rune_Freeze;
void (entity sucker) Suck;
void () Suck_Think;
void () Suck_Touch;
void () Suck_Spawn;
void (float riders, entity of_e) Rune_Suck_sprint;
void () Suck_Button;
void () Impact_Touch;
void () Rune_Twalk;
void () VengHead_Think;
void () VengHead_Spawn;
void () ShubHat_Bye;
void () ShubHat_Think;
void () ShubHat_Spawn;
void () Rune_Repel;
void () Ball_Touch;
void () Ball_Touch2;
void () Ball_Move;
void (entity master) Ball_Spawn;
void () Balls_Spawn;
void () Cloud_Bye;
void () Cloud_Think;
void () Cloud_Spawn;
float () is_shambler;
void (entity sham, float tell) shambler_slave_respawn;
void (entity sham, entity attacker) shambler_slave_retribution;
void (float riders, entity of_e) Rune_Shambler_sprint;
void (float by_player) Rune_ShamblerReloc;
void () Rune_ShamblerThink;
void () delayed_shambler_spawn_think;
void () delayed_shambler_spawn;
void () Rune_ShamblerSpawn;
void () Rune_Dual;
void () Weird_WanderThink;
void () Weird_AllOff;
void () Weird_Think;
void () Weird_Touch;
void () Spawn_Weird;
void () Rune_Weird;
void () Weird_Throw;
void (float riders, entity of_e) Rune_Phoenix_sprint;
void (float is_phoenix) Resurrect;
void () Berserk_Bleed;
void () Wall_Check;
void () Athlete_Jump;
void () Athlete_Run;
float () is_zombie;
void (float riders, entity of_e) Rune_Zombie_sprint;
void () Rune_Zombie;
float () maybe_remove_zombie_camper;
void (entity e) monk_protect;
void () monk_trance_on;
void () monk_trance_off;
void () monk_think;
void () monk_touch;
void () Torch_Trap_Think;
void () Torch_Trap_Touch;
void () Torch_Trap_Remove;
void (float riders, entity of_e) Rune_Torch_sprint;
void () Rune_Torch;
void () Torch_Touch;
float (entity e) pack_rat_frag_bonus_e;
void (float riders, entity of_e) pack_rat_sprint;
void () pack_rat_rune_touch;
void () pack_rat_rune_move;
void (float tell) pack_rat_rune_drop;
void (entity e) good_armor_set_armor_items_e;
float (entity e, float amt) decay_armor;
void (entity e, float rate) decay_armor_spawn;
void () decay_armor_think;
void () quad_activate;
void () quad_think;
void () jack_think;
void (float riders, entity of_e) Rune_Glue_sprint;
void () Glue_Think;
void () Glue_Stuck;
void () Glue_Touch;
void () Rune_Glue;
void (float riders) Rune_Blizzard_sprint;
void () Rune_Blizzard;
void (entity tofreeze, float freeze_time) Blizzard_Freeze;
void () Blizzard_Think;
void () Blizzard_Touch;
void () Rune_Thor;
void () Sniper_Touch;
void () Rune_Sniper;
void (entity e, float dist, float is_next) sonar_sprint;
void () Rune_Sonar;
void (float riders, entity of_e) Rune_AntiPack_sprint;
void () AntiPack_Think;
void () AntiPack_Touch;
void () AntiPack_Arm;
void () Rune_AntiPack;
void () Rune_Deflect_Telefrag;
void () Launch_Betty;
void () Betty_Package_Explode;
void () Betty_Touch;
void () Launch_Betty_Package;
void () Rune_Betty;
void () tornado_move;
void () tornado_pull;
void () tornado_touch;
void () tornado_spawn;
void () Rune_Tornado;
void () Rune_Think;
void () Rune_PostThink;
void () Rune_Button;
string (float riders, float type, float also_hook, float return_desc) Rune_Tell_real;
void (float r, entity of_e) Rune_Tell_sprint;
void (float type, float tell) Rune_Activate;
void (float tell) Rune_Delete;
entity () SelectRuneSpawnPoint;
float () Rune_Must_Move;
void () Rune_Move;
void () Rune_Touch;
string (float ix) Rune_Model;
void (vector sorigin, float xmax, float ymax, float zmax, float type, entity spawnee, entity killer) Rune_Spawn;
float (float type) Rune_Type_Allowed;
void (float numspawn) Rune_SpawnAll;
void () spawn_runes;
void () spawn_lithium_hook;
void () admin_init;
void (string msg, float passcode) admin_wrong_passcode;
void (float tell, float mention_console) admin_toggle;
void () admin_impulse_password;
void () admin_impulse_qsmack_password;
entity (float pt) admin_player_pick;
void () admin_eyes;
void (float cycle_show) admin_cycle;
void () admin_join;
void () admin_kick;
void () admin_kill;
void () admin_rename;
void () admin_rune_delete;
void () admin_team_change;
void () admin_team_change_toggle;
void () admin_vote_team_toggle;
void () admin_teamplay_zero;
void () admin_unbind;
void (string m) admin_changelevel;
void (string m) admin_changelevel_now;
void () admin_impulse_map;
void () change_map;
void () change_map2;
void () admin_change_map;
void () admin_impulse_commands;
void () admin_command;
void (entity targ) BFG_Lightning;
void () BFG_Zap;
void () BFG_Touch;
void () BFG_Warmup;
void () W_BFG;
void () W_Bomb;
void () bomb_arm;
void () bomb_tick;
void () bomb_explode;
void (float damage, float radius) Gas_Cloud_Damage;
void () Gas_Cloud_Think;
void () Gas_Cloud;
void () weapon_bubble;
void (float num_bubbles, vector o) bubbles;
void () burn_think;
void () burn_player_touch;
void (entity targ, entity attacker, float duration) burn_start;
void (entity inflictor, entity attacker, float damage, entity ignore,
	string dtype, float burn_chance, float burn_duration) burn_radius;
void () flamemissile_explode;
void () flamemissile_touch;
void () flamemissile_think;
void (string class, float ox) W_FireFlameMissile;
void (vector where, float set) multicast;
void (float type, entity e, vector o1, vector o2) create_te_lightning;
void (vector o, float become) create_te_explosion;
void (vector o) create_te_lavasplash;
void (vector o, float c) create_te_gunshot;
void (vector o) create_te_teleport;
void (vector o) create_te_tarexplosion;
void (float type, vector o) create_te_spike;
void (entity targ) set_viewport;
void (entity e) trackvel;
float (string var) cvar_infokey;
void (string var, string val) cvar_set_infokey;
void () muzzleflash;
void () smallkick;
void () bigkick;
void (entity e) bigkick_e;
float () samelevel_same_level;
void (float msg_type, float edict_num, string s) svc_updatename;
void (float msg_type, float edict_num, float f) svc_updatefrags;
void (float msg_type, float edict_num, float f) svc_updatecolors;
void (float to, float f) WriteBytePQ;
void (float to, float f) WriteShortPQ;
void (entity e, float c) pqc_new_team;
void (float tm) pqc_erase_team;
void (entity e, float tm, float tf) pqc_team_frags;
void (entity e, float m, float s) pqc_match_time;
void () pqc_match_reset;
void () pqc_ping_times;
void (entity e) restore_gmissile_owner;
void () gmissile_think;
void () W_FireGuidedMissile;
float (entity e) have_hook_e;
float () have_hook;
float (entity e) hook_damage_e;
void () DropHook;
float () MaybeDropHook;
void () HookPull;
void () LinkPos;
entity (entity head, entity tail, float num) CreateChain;
void () HookTouch;
void () LaunchHook;
void () HookOn;
void (entity e) HookOff_e;
void () HookOff;
void (entity e) HookOff_by_targ_e;
void () HookOff_by_targ;
void () HookToggle;
void () remove_hook_rune_from_players;
void () toggle_free_hook;
void () free_hook;
void () lithium_hook;
float (float bits) hook_type;
void (float type) set_hook;
float (string m) lp_map_to_code;
void (string m) lp_set_map;
void (string m) lp_unset_map;
float (string m) lp_isset_map;
void (float levsize) lp_clear_levsize;
void () lp_clear_all;
float (float levsize) sized_map_count;
float (float levsize) sized_custom_count;
string (float levsize, float n) sized_map;
string (float levsize, float n) sized_custom;
float (string m) map_size;
float (string m) custom_size;
string () rand_map;
string (float i) rand_custom;
string (float imp) impulse_to_map;
void () level_aliases;
void () custom_aliases_small;
void () custom_aliases_medium;
void () custom_aliases_large;
void () frag_init;
void (entity e, float f) add_frag;
float (entity e) team_stats_1;
string (float levsize) levsize_to_name;
string (string m, float linear) next_map;
float () pick_map_size;
float (string m) allowed_map;
float () select_map_ignores_serverflags;
string () select_map;
float (float levsize) sized_customs_count;
void (float levsize, float total) update_customs_count;
float (float levsize) customs_hunk_pos;
float () total_customs;
float (float levsize) customs_to_hunk;
void (float levsize) sized_customs_to_hunk;
string (float levsize, float pos) remove_custom_from_hunk;
void () custom_maps;
string (float levsize) select_custom;
float (entity e) aq_menu_get_e;
float () aq_menu_get;
void (float m) aq_menu_set;
void (float i) aq_menu_next;
void () aq_menu_print;
void (string s1, string s2, string s3) aq_menu_print_help;
void (float m) aq_menu_print_n;
float (entity e) is_admin_e;
float () is_admin;
float (entity e) is_qsmack_e;
float () is_qsmack;
float (entity e) is_player_e;
float () is_player;
float (entity e) is_observer_e;
float () is_observer;
float () is_rider;
entity (entity e) ridee_e;
entity () ridee;
float (float tell_type) corpse_to_observer;
void () dead_impulses;
void () obs_impulses;
void () obs_fly;
void () obs_pre_think;
void () obs_post_think;
void () obs_init_hidables;
void (float tell_type) obs_become;
void (entity tele) observer_teleport;
void () obs_player_detect;
float (entity e) game_queue_pos_e;
float () game_queue_len;
void (float force) obs_join_game;
void () obs_process_game_queue;
void (float tell) obs_rider_drop;
void (float tell) obs_rider_off;
void (entity e, float tell) obs_rider_set;
entity () ridee_pick;
void () high_track_recalc;
void () update_frag_rates;
void () obs_rider_next;
void () rider_wait_think;
void (entity e) set_has_riders_e;
void () show_ridee;
void () show_riders;
void () lose_riders;
void (entity e, string s) stuffcmd;
void () timelimit_countdown_think;
void () timelimit_countdown_spawn;
void (entity e, float chan, string samp, float vol, float atten) sound;
void (entity e, float chan, string samp, float vol, float atten) cloaked_sound;
void (entity e, string samp) self_sound;
void (entity e, string samp, string samp2) self_custom_sound;
void (string samp) admin_sound;
void (string samp) observer_sound;
void (entity e, float chan, string samp1, string samp2, float vol, float atten) random_sound2;
float (entity e) isteammate;
float (entity e) isfriend;
float (entity a, entity b) isfriend2;
float (entity e) is_valid_player_e;
float () is_valid_player;
void (float n) localcmd_kick;
void (string s1, string s2) kick;
float () kick_suicider;
void () process_storage_cvars;
void () rjs_worldspawn;
void () set_runemax;
void () set_gamemode;
void () ghost_check;
void () process_misc;
void () process_cvars;
float (entity e, float amt) decay_health;
void (entity e, float rate) decay_health_spawn;
void () decay_health_think;
string (float n) weaponnum_to_class;
void (float n) item_xweapon;
void (float ix) item_powerup_replacement;
void () item_powerup_replacement_real;
void (float all) disp_info;
float (string s) count_classname;
float (entity w, string s) count_classname_owner;
float (float t) armor_type_to_it;
void (entity e) set_armor_items_e;
float (entity e) get_max_armor_e;
float () get_max_armor;
float () maxplayers;
float () max_players;
float (float include_queued) count_players;
float (float include_qsmack) count_valid_players;
float (entity w) player_ent_to_num;
entity (float n) player_num_to_ent;
entity (float n) admin_cycle_num_to_ent;
float () count_hooks;
void (string class, vector orig, float dist) remove_classname_origin_dist;
void (string class, vector orig) remove_classname_origin;
void (string class) remove_classname;
void () fix_batman_villain_syndrome;
void () impulse_override_cancel;
void () impulse_override;
void () common_impulses;
void (string dt) sure_kill;
void (entity e, string dt) sure_kill_e;
string (float c) color_to_name;
string (float c) team_to_name;
float (float c) color_to_teamfrags;
float (float c) team_to_teamfrags;
void () levels;
float (float levsize) custom_sprint;
void () custom;
void () player_init;
void () player_forward_think;
void () player_init_think;
void () player_init_spawn;
void () show_players;
void () show_settings;
string () random_name;
string (string s1, string s2) random_string2;
void () forget_rune_owner;
float (float it) weapon_it_min_ammo;
float (float ammo_type) ammo_type_cur_ammo;
float (float it) weapon_it_ammo_type;
float (float it, float anymode) weapon_it_have_min_ammo;
void () use_ammo;
float (float it) weapon_it_to_num;
string (float it) weapon_it_to_name;
float (float wn) weapon_num_to_it;
float (float it) weapon_it_to_alt_bit;
void () switchfire;
void () switchfire_best;
float () switchfire_weapon;
void () switchfire_off;
void () set_current_ammo;
void () show_weapon_mode;
void (float w) set_weapon;
void () maybe_set_weapon;
float () random_color;
void (entity e) set_random_colors;
float (string c) is_player_start_class;
float (entity spot) safe_spawn_point;
entity (string targ_class, entity start_after) find_spawn_point_class;
void () weapon_mode;
float (float it) weapon_it_is_alt;
float (float use_alt, float anymode) W_ChangeWeapon;
void () CycleWeaponCommand;
void () CycleWeaponReverseCommand;
void (float force) draw_hud;
void (entity e, float force) draw_hud_e;
void (float riders, entity of_e, float type, float also_hook) Rune_Tell;
void () rune_tell_refresh;
void (float no_clear) rune_tell_stop;
void (float riders, entity of_e) rune_tell_toggle;
void () spawn_protect_off;
void (entity e) spawn_protect_off_e;
void (string m) changelevel;
float () is_topdog;
float (entity e) environmental;
float (entity e) invisible;
float (entity e) is_pet_e;
float () is_pet;
void (entity attacker, entity targ, float d) see_damage;
float (entity e, float type) maybe_update_trap_count;
void () update_client_pings;
void (string type, float mode) toggle_powerup;
void () setquad;
void () setpent;
void () setring;
void () setsuit;
void (float mode) toggle_armor;
void () setarmor;
void () setrotate;
void () setrunes;
void () setalts;
void () setshields;
void () sethookdamage;
void (string type, float bit, float mode) toggle_health;
void () setmega;
void () toggle_weapons_stay;
void () toggle_armor_drop;
void () setfaststart;
void () setmatchlock;
void () setbackpacks;
void () toggle_powerup_drop;
void () toggle_rune_drop;
void () toggle_lightning_discharge;
void () setclassicmega;
void () toggle_mode_lock;
void () toggle_random_spawn;
void () toggle_shoot_buttons;
void () toggle_powerup_hats;
void () toggle_vote_hook;
void () set_gamemode_default;
float (float type, float neg, string desc) maybe_bprint_option;
void () vote_impulse_commands;
void () vote_command;
float (float tell) vote_team_disabled;
float (float tell) vote_hook_disabled;
entity () find_vip;
void (entity vip) vote_action;
void (entity vip, float msg_type, float is_queue, float value) maybe_print_votes;
float (float type) count_votes;
void () toyo_bot;
void () vote_think;
void () vote;
void () vote_yes;
void () vote_no;
void () show_votes;
void () bind_keys;
void (string name, float name_num, float imp) player_init_switchfire_alias;
void () switchfire_aliases;
void (string cmd, float imp) player_init_impulse_alias;
void (string cmd, float imp) player_admin_impulse_alias;
void (string cmd, float imp) player_vote_impulse_alias;
void () player_bindings_think;
void () spawn_player_bindings;
void () player_aliases;
void () admin_aliases;
void () vote_aliases;
void (string level, float imp) player_console_init_level_alias;
void (string cmd, string cvr, float imp) console_init_cvar_alias;
void () custom_aliases_think;
void () spawn_custom_aliases;
void () console_aliases;
void () check_console_command;
void () console_commands;
void () commands;
void () help_levels;
void () help_vote;
void () help_match;
void () help_options;
void () help_deathmatch;
void () help_teamplay;
void () help_noexit;
void () help_temp1;
void () help_scratch1;
void (string s) bprint;
void (float n) bprint_float;
void (vector v) bprint_vec;
void (string s) bprint_timestamp;
void (float n) dprint_float;
void (vector v) dprint_vec;
void (string s) dprint_force;
void (string s, float i) dprint_bitfield;
void (entity e, string s1, string s2, string s3, string s4, string s5, string s6, string s7) centerprint7;
void (entity e, string s1, string s2, string s3, string s4, string s5, string s6) centerprint6;
void (entity e, string s1, string s2, string s3, string s4, string s5) centerprint5;
void (entity e, string s1, string s2, string s3, string s4) centerprint4;
void (entity e, string s1, string s2, string s3) centerprint3;
void (entity e, string s1, string s2) centerprint2;
void (entity e, string s1) centerprint;
void (entity e, float riders, string s1, string s2, string s3, string s4, string s5) rprint5;
void (entity e, float riders, string s1, string s2, string s3, string s4) rprint4;
void (entity e, float riders, string s1, string s2, string s3) rprint3;
void (entity e, float riders, string s1, string s2) rprint2;
void (entity e, float riders, string s1) rprint;
void (entity e, float riders, float n) rprint_float;
void (entity pe, float riders, entity e) rprint_entity;
void (entity e, float riders, float n, string s) rprint_numdesc;
void (entity e, string s1, string s2, string s3, string s4, string s5, string s6, string s7) sprint7;
void (entity e, string s1, string s2, string s3, string s4, string s5, string s6) sprint6;
void (entity e, string s1, string s2, string s3, string s4, string s5) sprint5;
void (entity e, string s1, string s2, string s3, string s4) sprint4;
void (entity e, string s1, string s2, string s3) sprint3;
void (entity e, string s1, string s2) sprint2;
void (entity e, string s1) sprint;
void (entity e, float n) sprint_float;
void (entity e, entity of_e) sprint_entity;
void (string s1, string s2) sprint_admin2;
void (string s1) sprint_admin;
void (string s1, string s2) sprint_obs2;
void (entity e, float n, float width) sprint_int_f;
void (entity e, float n, float int_w, float frac_w) sprint_float_f;
void (entity e, string s) self_sprint;
void (entity e, float n) self_sprint_float;
void (entity e, float b) self_sprint_boolean;
void (entity e, float n, float int_w, float frac_w) self_sprint_float_f;
void (entity e, string s, float i) self_sprint_bitfield;
void (entity e, string s, float len) self_sprintf_len;
void (entity to, entity e) sprint_eff_player;
void (entity to) sprint_efficiency_e;
void (entity to, entity e) sprint_killstats_player;
void (entity to) sprint_killstats_e;
void () sprint_killstats;
void (entity to, entity e) sprint_stats_player;
void () sprint_efficiency;
void (entity to) sprint_stats_e;
void () sprint_stats;
float () enforced_teams;
float (float tm) is_valid_team;
float () correct_team;
float () is_correct_team;
float (float tm) team_to_color;
float (float tm) team_to_particle;
float (float tm) team_top_color;
float (float bc) random_top_color;
float (float tm) count_team;
float (float tm) count_team_observers;
void (entity e, float tm) set_team_e;
float () is_allowable_team;
float (float n_teams, float n1, float n2, float n3, float n4) pick_team;
void (entity e) assign_teams;
void (float new_teamplay, float update_cvar) change_teamplay;
void () check_teamplay;
void (float check_state) toggle_teamplay;
void () toggle_teamplay_real;
float (float tm, float total_teams) next_team;
void (entity by_e) team_rotate;
void () describe_team_mode;
void (entity e, float tm) sprint_team;
void () team_fraglimit;
void (float is_end) team_stats;
float (float n) num_to_bit;
void () teamscores_update;
void (entity client) teamscores_on;
void (entity client) teamscores_off;
string (float mode) gamemode_map;
string (float mode) current_gamemode;
void (float mode) gamemode_default;
void (float mode) change_mode_to;
void () change_mode_to_heads;
void () change_mode_to_midair;
void () change_mode_to_match;
void () change_mode_to_arena;
void () change_mode_to_practice;
void () change_mode_to_normal;
void () match_defaults;
void () arena_defaults;
void () practice_defaults;
void () normal_defaults;
void (entity e) arena_game_pos_announce;
void () arena_game_queue_announce;
void (entity e) set_arena_parms_e;
void () arena_fight;
void () arena_countdown;
void () arena_results;
void () arena_death_think;
void (entity targ, entity attacker, string dtype) arena_death;
void () arena_init;
float () put_client_in_arena;
float () arena_client_disconnect;
void () match_init;
void (entity e) match_client_init;
void () match_obs_init;
void (float type) match_obs_become;
float (float c) colors_to_shirt;
float (float c) colors_to_pants;
float (float c) colors_to_team;
void (entity e, float c) restore_colors;
void () match_respawn_all_items;
void () match_pre_think;
void () match_abort;
void () match_stop_countdown;
void () match_timer;
void () match_unready_names;
void (entity e) reset_efficiency_e;
void () reset_efficiency_all;
float (float tm) players_on_team;
float () max_players_per_team;
void (float countdown) bprint_teamsize;
void () match_countdown;
void () match_spawn_countdown;
float () match_players_ready;
void () audit_match;
void (entity client, entity e) svc_updatename_hack;
float () match_obs_join_game;
void (entity e) match_remove_ghosts;
entity () match_find_ghost;
void () match_spawn_ghost;
float () match_restore_ghost;
void () match_client_disconnect;
void () maybe_remove_team;
void (float tm) remove_team;
void (entity e) match_time_set;
void () kill_all_players;
void () match_ready;
void () match_notready;
void () print_timeset_menu;
void () vote_timeset;
float () match_impulse_override;
void () altar_touch;
void () altar_spit;
void (vector spot) altar_create;
void () head_death_think;
void () head_think;
void () head_touch;
void (entity head, string gibname, float dm) set_thrown_head;
void (string gibname, float dm) head_throw;
void () head_drop;
void () head_carry;
void (entity head) bprint_head_owner;
void (float heads) bprint_altar_touch;
void () bprint_head_touch;
void () delayed_altar_place;
void () altar_place;
void (vector spot) spawn_altar;
void () heads_tell;
void () monster_use;
void () monster_death_use;
void () walkmonster_start_go;
void () walkmonster_start;
void () flymonster_start_go;
void () flymonster_start;
void () swimmonster_start_go;
void () swimmonster_start;
void () door_blocked;
void () door_hit_top;
void () door_hit_bottom;
void () door_go_down;
void () door_go_up;
void () door_fire;
void () door_use;
void () door_trigger_touch;
void () door_killed;
void () door_touch;
entity (vector fmins, vector fmaxs) spawn_field;
float (entity e1, entity e2) EntitiesTouching;
void () LinkDoors;
void () func_door;
void () fd_secret_use;
void () fd_secret_move1;
void () fd_secret_move2;
void () fd_secret_move3;
void () fd_secret_move4;
void () fd_secret_move5;
void () fd_secret_move6;
void () fd_secret_done;
void () secret_blocked;
void () secret_touch;
void () func_door_secret;
void () button_wait;
void () button_done;
void () button_return;
void () button_blocked;
void () button_fire;
void () button_use;
void () button_touch;
void () button_killed;
void () func_button;
void () trigger_reactivate;
void () multi_wait;
void () multi_trigger;
void () multi_killed;
void () multi_use;
void () multi_touch;
void () trigger_multiple;
void () trigger_once;
void () trigger_relay;
void () trigger_secret;
void () counter_use;
void () trigger_counter;
void () play_teleport;
void (vector org) spawn_tfog;
void () tdeath_touch;
void (vector org, entity death_owner) spawn_tdeath;
entity () find_info_teleport_destination;
void () teleport_touch;
void () info_teleport_destination;
void () teleport_use;
void () trigger_teleport;
void () trigger_setskill;
void () trigger_onlyregistered;
void () hurt_on;
void () hurt_touch;
void () trigger_hurt;
void () trigger_push_touch;
void () trigger_push;
void () trigger_monsterjump_touch;
void () trigger_monsterjump;
void () plat_spawn_inside_trigger;
void () plat_hit_top;
void () plat_hit_bottom;
void () plat_go_down;
void () plat_go_up;
void () plat_center_touch;
void () plat_outside_touch;
void () plat_trigger_use;
void () plat_crush;
void () plat_use;
void () func_plat;
void () train_blocked;
void () train_use;
void () train_wait;
void () train_next;
void () func_train_find;
void () func_train;
void () misc_teleporttrain;
void () info_null;
void () misc_fireball;
void () fireball_think;
void () fireball_touch;
void () respawn_barrel;
void () barrel_explode_real;
void () barrel_explode;
void () misc_explobox;
void () misc_explobox2;
void () Laser_Touch;
void (vector org, vector vec) LaunchLaser;
void () spikeshooter_use;
void () shooter_think;
void () trap_spikeshooter;
void () trap_shooter;
void () air_bubbles;
void () make_bubbles;
void () bubble_split;
void () bubble_remove;
void () bubble_bob;
void () func_wall_use;
void () func_wall;
void () func_illusionary;
void () func_episodegate;
void () func_bossgate;
void () misc_touch;
void (string samp, float vol) ambient_sound;
void () ambient_comp_hum;
void () ambient_drip;
void () ambient_drone;
void () ambient_flouro_buzz;
void () ambient_light_buzz;
void () ambient_suck_wind;
void () ambient_swamp1;
void () ambient_swamp2;
void () ambient_thunder;
void () Light_Setup;
void () light_switch;
void () light_use;
void () light;
void () light_fluoro;
void () light_fluorospark;
void (string s) light_makestatic;
void () light_globe;
void () ambient_fire1;
void () light_torch_small_walltorch;
void () light_flame_large_yellow;
void () light_flame_small_yellow;
void () light_flame_small_white;
float () place_my_targets;
void (string ec, float ea, vector eo, float es) spawn_item;
void (vector e_origin, float e_mangle, string e_targetname) spawn_info_teleport_destination;
void (vector e_origin, string e_model, string e_target) spawn_trigger_teleport;
void (vector eo, float ef, string em) spawn_effects_model;
void () place_my_items;
void () remove_my_items;
void () remove_exit_wall;
void () fix_map;
void () fix_map_spawn;
void () event_lightning;
void () monster_army;
void () monster_boss;
void () monster_demon1;
void () monster_dog;
void () monster_enforcer;
void () monster_fish;
void () monster_hell_knight;
void () monster_knight;
void () monster_ogre;
void () monster_oldone;
void () monster_shalrath;
void () monster_tarbaby;
void () monster_wizard;
void () sham_stand1;
void () sham_stand2;
void () sham_stand3;
void () sham_stand4;
void () sham_stand5;
void () sham_stand6;
void () sham_stand7;
void () sham_stand8;
void () sham_stand9;
void () sham_stand10;
void () sham_stand11;
void () sham_stand12;
void () sham_stand13;
void () sham_stand14;
void () sham_stand15;
void () sham_stand16;
void () sham_stand17;
void () sham_walk1;
void () sham_walk2;
void () sham_walk3;
void () sham_walk4;
void () sham_walk5;
void () sham_walk6;
void () sham_walk7;
void () sham_walk8;
void () sham_walk9;
void () sham_walk10;
void () sham_walk11;
void () sham_walk12;
void () sham_run1;
void () sham_run2;
void () sham_run3;
void () sham_run4;
void () sham_run5;
void () sham_run6;
void () sham_smash1;
void () sham_smash2;
void () sham_smash3;
void () sham_smash4;
void () sham_smash5;
void () sham_smash6;
void () sham_smash7;
void () sham_smash8;
void () sham_smash9;
void () sham_smash10;
void () sham_smash11;
void () sham_smash12;
void (float side) ShamClaw;
void () sham_swingl1;
void () sham_swingl2;
void () sham_swingl3;
void () sham_swingl4;
void () sham_swingl5;
void () sham_swingl6;
void () sham_swingl7;
void () sham_swingl8;
void () sham_swingl9;
void () sham_swingr1;
void () sham_swingr2;
void () sham_swingr3;
void () sham_swingr4;
void () sham_swingr5;
void () sham_swingr6;
void () sham_swingr7;
void () sham_swingr8;
void () sham_swingr9;
void () sham_melee;
void () CastLightning;
void () sham_magic1;
void () sham_magic2;
void () sham_magic3;
void () sham_magic4;
void () sham_magic5;
void () sham_magic6;
void () sham_magic9;
void () sham_magic10;
void () sham_magic11;
void () sham_magic12;
void () sham_pain1;
void () sham_pain2;
void () sham_pain3;
void () sham_pain4;
void () sham_pain5;
void () sham_pain6;
void (entity attacker, float damage) sham_pain;
void () sham_death1;
void () sham_death2;
void () sham_death3;
void () sham_death4;
void () sham_death5;
void () sham_death6;
void () sham_death7;
void () sham_death8;
void () sham_death9;
void () sham_death10;
void () sham_death11;
void () sham_die;
void () monster_shambler;
void (float type) monster_shambler_1;
void () zombie_stand1;
void () zombie_stand2;
void () zombie_stand3;
void () zombie_stand4;
void () zombie_stand5;
void () zombie_stand6;
void () zombie_stand7;
void () zombie_stand8;
void () zombie_stand9;
void () zombie_stand10;
void () zombie_stand11;
void () zombie_stand12;
void () zombie_stand13;
void () zombie_stand14;
void () zombie_stand15;
void () zombie_cruc1;
void () zombie_cruc2;
void () zombie_cruc3;
void () zombie_cruc4;
void () zombie_cruc5;
void () zombie_cruc6;
void () zombie_walk1;
void () zombie_walk2;
void () zombie_walk3;
void () zombie_walk4;
void () zombie_walk5;
void () zombie_walk6;
void () zombie_walk7;
void () zombie_walk8;
void () zombie_walk9;
void () zombie_walk10;
void () zombie_walk11;
void () zombie_walk12;
void () zombie_walk13;
void () zombie_walk14;
void () zombie_walk15;
void () zombie_walk16;
void () zombie_walk17;
void () zombie_walk18;
void () zombie_walk19;
void () zombie_run1;
void () zombie_run2;
void () zombie_run3;
void () zombie_run4;
void () zombie_run5;
void () zombie_run6;
void () zombie_run7;
void () zombie_run8;
void () zombie_run9;
void () zombie_run10;
void () zombie_run11;
void () zombie_run12;
void () zombie_run13;
void () zombie_run14;
void () zombie_run15;
void () zombie_run16;
void () zombie_run17;
void () zombie_run18;
void () ZombieGrenadeTouch;
void (vector st) ZombieFireGrenade;
void (float f, void () th) zombie_atta_frame;
void () zombie_atta1;
void () zombie_atta2;
void () zombie_atta3;
void () zombie_atta4;
void () zombie_atta5;
void () zombie_atta6;
void () zombie_atta7;
void () zombie_atta8;
void () zombie_atta9;
void () zombie_atta10;
void () zombie_atta11;
void () zombie_atta12;
void () zombie_atta13;
void () zombie_attb1;
void () zombie_attb2;
void () zombie_attb3;
void () zombie_attb4;
void () zombie_attb5;
void () zombie_attb6;
void () zombie_attb7;
void () zombie_attb8;
void () zombie_attb9;
void () zombie_attb10;
void () zombie_attb11;
void () zombie_attb12;
void () zombie_attb13;
void () zombie_attb14;
void () zombie_attc1;
void () zombie_attc2;
void () zombie_attc3;
void () zombie_attc4;
void () zombie_attc5;
void () zombie_attc6;
void () zombie_attc7;
void () zombie_attc8;
void () zombie_attc9;
void () zombie_attc10;
void () zombie_attc11;
void () zombie_attc12;
void () zombie_missile;
void (float dist) zombie_painforward;
void () zombie_paina1;
void () zombie_paina2;
void () zombie_paina3;
void () zombie_paina4;
void () zombie_paina5;
void () zombie_paina6;
void () zombie_paina7;
void () zombie_paina8;
void () zombie_paina9;
void () zombie_paina10;
void () zombie_paina11;
void () zombie_paina12;
void () zombie_painb1;
void () zombie_painb2;
void () zombie_painb3;
void () zombie_painb4;
void () zombie_painb5;
void () zombie_painb6;
void () zombie_painb7;
void () zombie_painb8;
void () zombie_painb9;
void () zombie_painb10;
void () zombie_painb11;
void () zombie_painb12;
void () zombie_painb13;
void () zombie_painb14;
void () zombie_painb15;
void () zombie_painb16;
void () zombie_painb17;
void () zombie_painb18;
void () zombie_painb19;
void () zombie_painb20;
void () zombie_painb21;
void () zombie_painb22;
void () zombie_painb23;
void () zombie_painb24;
void () zombie_painb25;
void () zombie_painb26;
void () zombie_painb27;
void () zombie_painb28;
void () zombie_painc1;
void () zombie_painc2;
void () zombie_painc3;
void () zombie_painc4;
void () zombie_painc5;
void () zombie_painc6;
void () zombie_painc7;
void () zombie_painc8;
void () zombie_painc9;
void () zombie_painc10;
void () zombie_painc11;
void () zombie_painc12;
void () zombie_painc13;
void () zombie_painc14;
void () zombie_painc15;
void () zombie_painc16;
void () zombie_painc17;
void () zombie_painc18;
void () zombie_paind1;
void () zombie_paind2;
void () zombie_paind3;
void () zombie_paind4;
void () zombie_paind5;
void () zombie_paind6;
void () zombie_paind7;
void () zombie_paind8;
void () zombie_paind9;
void () zombie_paind10;
void () zombie_paind11;
void () zombie_paind12;
void () zombie_paind13;
void () zombie_paine1;
void () zombie_paine2;
void () zombie_paine3;
void () zombie_paine4;
void () zombie_paine5;
void () zombie_paine6;
void () zombie_paine7;
void () zombie_paine8;
void () zombie_paine9;
void () zombie_paine10;
void () zombie_paine11;
void () zombie_paine12;
void () zombie_paine13;
void () zombie_paine14;
void () zombie_paine15;
void () zombie_paine16;
void () zombie_paine17;
void () zombie_paine18;
void () zombie_paine19;
void () zombie_paine20;
void () zombie_paine21;
void () zombie_paine22;
void () zombie_paine23;
void () zombie_paine24;
void () zombie_paine25;
void () zombie_paine26;
void () zombie_paine27;
void () zombie_paine28;
void () zombie_paine29;
void () zombie_paine30;
void () zombie_die;
void (entity attacker, float take) zombie_pain;
void () monster_zombie;
void (float type) monster_zombie_1;
