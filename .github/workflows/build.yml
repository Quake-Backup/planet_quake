name: build

on:
  pull_request:
    paths-ignore:
      - '**.md'
      - '*.txt'
      - '.gitignore'
      - 'docs/*'
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'
      - '*.txt'
      - '.gitignore'
      - 'docs/*'
  release:
    types: [published]

  workflow_dispatch:

jobs:
  build-everything:
    name: ${{ matrix.config }} ${{ matrix.name }} (${{ matrix.arch }}) ${{ matrix.proper }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        runtime: [client, client-slim, client-mw]
        #, client-experimental, server, server-mw, server-experimental, q3map2, renderer, renderer2, renderer-mw, renderer2-mw, renderervk, multigame, multigame-static]
        platform: [wasm]
        arch: [js]
        config: [Release]
        include:
          - config: Release
            rule: release

          - arch: js
            platform: wasm
            name: WebAssembly
            options: USE_ASYNCHRONOUS=1 USE_LAZY_LOAD=1
            cc: /home/runner/work/planet_quake/planet_quake/libs/linux/wasi-sdk-14.0/bin/clang

          - runtime: client
            proper: Client
            makefile: make/build_client.make
            cflags: ~

          - runtime: client-mw
            proper: Client (Multiworld)
            makefile: make/build_client.make
            cflags: USE_MULTIVM_CLIENT=1 USE_MULTIVM_SERVER=1

          - runtime: client-slim
            proper: Client (Slim)
            makefile: make/build_client.make
            cflags: BUILD_SLIM_CLIENT=1

#    - uses: actions/checkout@v2
    steps:
    - uses: snow-actions/sparse-checkout@v1.1.0
      with:
        fetch-depth: 1
        patterns: |
          /code/
          /make/
          /games/multigame/
          /libs/musl-*/
          /libs/tools/quake3/
          /libs/libvorbis-*/
          /libs/libogg-*/

    - name: Install tools
      run: |
        sudo apt-get -qq update
        sudo apt-get -y install libcurl4-openssl-dev mesa-common-dev libxxf86dga-dev libxrandr-dev libxxf86vm-dev libasound-dev libsdl2-dev wget binaryen git
        wget --no-check-certificate https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-14/wasi-sdk-14.0-linux.tar.gz
        pwd
        mkdir libs/linux
        tar -zxvf wasi-sdk-14.0-linux.tar.gz -C libs/linux/
        ls -la libs/linux
        npm install -g uglify-js

    - name: Build
      run: |
        make -f ${{ matrix.makefile }} -j 16 NO_MAKE_LOCAL=1 ARCH=${{ matrix.arch }} ${{ matrix.options }} ${{ matrix.cflags }} PLATFORM=${{ matrix.platform }} CC=${{ matrix.cc }} V=1 clean ${{ matrix.rule }} install 

    - uses: actions/upload-artifact@v2
      if: matrix.config == 'Release'
      with:
        name: ${{ matrix.platform }}-${{ matrix.arch }}
        path: bin
        if-no-files-found: error
        retention-days: 10

  create-testing:
    if: github.ref == 'refs/heads/master' && github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    needs: [build-everything]
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2

      - name: Create binary archives
        run: |
          7z a -r ./quake3e-wasm.zip ./wasm-js/*
#         7z a -r quake3e-linux-aarch64.zip  ./linux-aarch64/*
#         7z a -r quake3e-linux-armv7.zip    ./linux-armv7/*

      - uses: actions/checkout@v2
        if: false

      - name: Create game archive
        if: false
        run: |
          7z a -r ../xxx-multigame.pk3      ./games/multigame/assets/*
          cd ..
          mv planet_quake planet_quake_checkout
          mkdir planet_quake
          7z a -r xxx-multigame.pk3 ./planet_quake_build/linux-x86_64/*.qvm
          7z a -r xxx-multigame.zip xxx-multigame.pk3
          7z a -r xxx-multigame.zip ./planet_quake_build/linux-x86_64/*.so
          7z a -r xxx-multigame.zip ./planet_quake_build/macos-x86_64/*.dylib
          7z a -r xxx-multigame.zip ./planet_quake_build/windows-mingw-x86_64/*.dll
          mv ./*.zip planet_quake/
          mv ./*.pk3 planet_quake/

      - name: Create latest build
        uses: ec-/action-automatic-releases@test
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: "latest"
          prerelease: false
          title: Latest Build
          files: |
            *.zip
            *.pk3

  update-release:
    if: ${{ github.event_name == 'release' }}
    needs: [create-testing]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          # - artifact_dir: linux-aarch64
          #   artifact_name: quake3e-linux-aarch64.zip

          # - artifact_dir: linux-armv7
          #  artifact_name: quake3e-linux-armv7.zip

          - artifact_dir: ./
            artifact_name: quake3e-linux-x86.zip

          - artifact_dir: ./
            artifact_name: quake3e-linux-x86_64.zip

          - artifact_dir: ./
#           artifact_name: quake3e-windows-mingw-x86.zip
            artifact_name: quake3e-windows-x86.zip 

          - artifact_dir: ./
#           artifact_name: quake3e-windows-mingw-x86_64.zip
            artifact_name: quake3e-windows-x86_64.zip

#          - artifact_dir: windows-msvc-x86
#           artifact_name: quake3e-windows-msvc-x86.zip

#         - artifact_dir: windows-msvc-x86_64
#           artifact_name: quake3e-windows-msvc-x86_64.zip

          - artifact_dir: ./
#           artifact_name: quake3e-windows-msvc-arm64.zip
            artifact_name: quake3e-windows-arm64.zip

          - artifact_dir: ./
            artifact_name: quake3e-macos-x86_64.zip

          - artifact_dir: ./
            artifact_name: quake3e.wasm

          - artifact_dir: ./
            artifact_name: quake3e.html

          - artifact_dir: ./
            artifact_name: quake3e-wasm.zip

          - artifact_dir: ./
            artifact_name: xxx-multigame.pk3

          - artifact_dir: ./
            artifact_name: xxx-multigame.zip

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2

      - name: Create archive
        run: 7z a -r ${{ matrix.artifact_name }} ./${{ matrix.artifact_dir }}/*

      - name: Upload archive
        uses: "svenstaro/upload-release-action@v2"
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
          overwrite: true
          file: ${{ matrix.artifact_name }}
